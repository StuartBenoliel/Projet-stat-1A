geom_smooth(aes(y = Quantile[,3], color = "Red Points"), method = "loess", se = FALSE) +
geom_hline(yintercept = M, linetype = "dashed", color = "black") +
geom_hline(yintercept = M2, linetype = "dashed", color = "black") +
geom_text(x = 27, y = M - 1, label = "Moyenne nationale Tour 1", fontface = 3,color="blue")+
geom_text(x = 27, y = M2 - 1, label = "Moyenne nationale Tour 2", fontface = 3,color="red")
TCPIS
TCPIS<-ggplot(Quantile, aes(x = Quantile[,4])) +
geom_point(aes(y = Quantile[,2], color = "Blue Points")) +
geom_point(aes(y = Quantile[,3], color = "Red Points")) +
scale_color_manual(values = c("blue", "red"),
labels = c("1er Tour", "2ème Tour")) +
labs(caption="Note: Les centiles inférieurs au 14ème centile sont identiques et non prises en compte \nMéthode : Régression loess \nChamp : France métropolitaine, limite territoriales des communes au 1er janvier 2018 \nSource : Insee 2018, enquêtes de recensement / Ministère de l'intérieur 2022",
color = "Couleur :") + theme_bw() +theme(plot.caption = element_text(hjust = 0, face = "italic"))+
scale_x_continuous("Centiles des parts des parts des cadres et professions intellectuelles supérieures",limits=c(15,100),breaks=seq(0,100,by=10))+
scale_y_continuous("Moyenne des voix Le Pen suivant le Tour 2022 (%)")+
geom_smooth(aes(y = Quantile[,2], color = "Blue Points"), method = "loess", se = FALSE) +
geom_smooth(aes(y = Quantile[,3], color = "Red Points"), method = "loess", se = FALSE) +
geom_hline(yintercept = M, linetype = "dashed", color = "black") +
geom_hline(yintercept = M2, linetype = "dashed", color = "black") +
geom_text(x = 27, y = M - 1, label = "Moyenne nationale Tour 1", fontface = 3,color="blue")+
geom_text(x = 27, y = M2 - 1, label = "Moyenne nationale Tour 2", fontface = 3,color="red")
TCPIS
Quantile<-FQuantile1_2("Diplomés_supérieur_non_scolarisés",100)
Tdip<-ggplot(Quantile, aes(x = Quantile[,4])) +
geom_point(aes(y = Quantile[,2], color = "Blue Points")) +
geom_point(aes(y = Quantile[,3], color = "Red Points")) +
scale_color_manual(values = c("blue", "red"),
labels = c("1er Tour", "2ème Tour")) +
labs(caption="Note : Population des 15 ans et plus non scolarisée ayant obtenu un diplôme type universitaire de 1er cycle ou plus\nMéthode : Régression loess \nChamp : France métropolitaine, limite territoriales des communes au 1er janvier 2018 \nSource : Insee 2018, enquêtes de recensement / Ministère de l'intérieur 2022",
color = "Couleur :") +
theme_bw()+theme(plot.caption = element_text(hjust = 0, face = "italic"))+
scale_x_continuous("Centiles des parts des diplomés du supérieur", breaks = seq(0, 100, by = 10)) +
scale_y_continuous("Moyenne des voix Le Pen suivant le Tour 2022 (%)") +
geom_smooth(aes(y = Quantile[,2], color = "Blue Points"), method = "loess", se = FALSE) +
geom_smooth(aes(y = Quantile[,3], color = "Red Points"), method = "loess", se = FALSE) +
geom_hline(yintercept = M, linetype = "dashed", color = "black") +
geom_hline(yintercept = M2, linetype = "dashed", color = "black") +
geom_text(x = 20, y = M - 1, label = "Moyenne nationale Tour 1", fontface = 3,color="blue")+
geom_text(x = 20, y = M2 - 1, label = "Moyenne nationale Tour 2", fontface = 3,color="red")
Tdip
Quantile<-FQuantile1_2("Cadres_professions_intellectuelles_supérieures",100)
TCPIS<-ggplot(Quantile, aes(x = Quantile[,4])) +
geom_point(aes(y = Quantile[,2], color = "Blue Points")) +
geom_point(aes(y = Quantile[,3], color = "Red Points")) +
scale_color_manual(values = c("blue", "red"),
labels = c("1er Tour", "2ème Tour")) +
labs(caption="Note: Les centiles inférieurs au 14ème centile sont identiques et non prises en compte \nMéthode : Régression loess \nChamp : France métropolitaine, limite territoriales des communes au 1er janvier 2018 \nSource : Insee 2018, enquêtes de recensement / Ministère de l'intérieur 2022",
color = "Couleur :") + theme_bw() +theme(plot.caption = element_text(hjust = 0, face = "italic"))+
scale_x_continuous("Centiles des parts des parts des cadres et professions intellectuelles supérieures",limits=c(15,100),breaks=seq(0,100,by=10))+
scale_y_continuous("Moyenne des voix Le Pen suivant le Tour 2022 (%)")+
geom_smooth(aes(y = Quantile[,2], color = "Blue Points"), method = "loess", se = FALSE) +
geom_smooth(aes(y = Quantile[,3], color = "Red Points"), method = "loess", se = FALSE) +
geom_hline(yintercept = M, linetype = "dashed", color = "black") +
geom_hline(yintercept = M2, linetype = "dashed", color = "black") +
geom_text(x = 27, y = M - 1, label = "Moyenne nationale Tour 1", fontface = 3,color="blue")+
geom_text(x = 27, y = M2 - 1, label = "Moyenne nationale Tour 2", fontface = 3,color="red")
TCPIS
Quantile<-FQuantile1_2("Ouvriers",100)
TOU<-ggplot(Quantile, aes(x = Quantile[,4])) +
geom_point(aes(y = Quantile[,2], color = "Blue Points")) +
geom_point(aes(y = Quantile[,3], color = "Red Points")) +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0, face = "italic")) +
scale_color_manual(values = c("blue", "red"),
labels = c("1er Tour", "2ème Tour")) +
labs(color = "Couleur :") + theme_bw() +
scale_x_continuous("Centiles des parts des ouvriers",breaks=seq(0,100,by=10))+
scale_y_continuous("Moyenne des voix Le Pen suivant le Tour 2022 (%)")+
geom_smooth(aes(y = Quantile[,2], color = "Blue Points"), method = "lm", se = FALSE) +
geom_smooth(aes(y = Quantile[,3], color = "Red Points"), method = "lm", se = FALSE) +
geom_hline(yintercept = M, linetype = "dashed", color = "black") +
geom_hline(yintercept = M2, linetype = "dashed", color = "black") +
geom_text(x = 20, y = M + 1, label = "Moyenne nationale Tour 1", fontface = 3,color="blue")+
geom_text(x = 20, y = M2 + 1, label = "Moyenne nationale Tour 2", fontface = 3,color="red")
TOU
TOU<-ggplot(Quantile, aes(x = Quantile[,4])) +
geom_point(aes(y = Quantile[,2], color = "Blue Points")) +
geom_point(aes(y = Quantile[,3], color = "Red Points")) +
scale_color_manual(values = c("blue", "red"),
labels = c("1er Tour", "2ème Tour")) +
labs(caption="Méthode : Régression linéaire \nChamp : France métropolitaine, limite territoriales des communes au 1er janvier 2018 \nSource : Insee 2018, enquêtes de recensement / Ministère de l'intérieur 2022",color = "Couleur :") + theme_bw() +theme(plot.caption = element_text(hjust = 0, face = "italic"))+
scale_x_continuous("Centiles des parts des ouvriers",breaks=seq(0,100,by=10))+
scale_y_continuous("Moyenne des voix Le Pen suivant le Tour 2022 (%)")+
geom_smooth(aes(y = Quantile[,2], color = "Blue Points"), method = "lm", se = FALSE) +
geom_smooth(aes(y = Quantile[,3], color = "Red Points"), method = "lm", se = FALSE) +
geom_hline(yintercept = M, linetype = "dashed", color = "black") +
geom_hline(yintercept = M2, linetype = "dashed", color = "black") +
geom_text(x = 20, y = M + 1, label = "Moyenne nationale Tour 1", fontface = 3,color="blue")+
geom_text(x = 20, y = M2 + 1, label = "Moyenne nationale Tour 2", fontface = 3,color="red")
TOU
COR<-ggplot(Cor,aes(y = Variable, x=Corrélation, fill=Signe))+theme_bw()+
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0, face = "italic"))+
labs(caption="Note : Calculée à l'échelle communale avec la nomenclature des PCS de 2003 \nChamp : France métropolitaine, limite territoriales des communes au 1er janvier 2018 \nSource : Insee 2018, enquêtes Emploi")+
scale_x_continuous("Coefficient de corrélation de Pearson")+
scale_y_discrete("")+
geom_col(show.legend = FALSE)
COR
CPIS<-ggplot(T1,aes(x = Cadres_professions_intellectuelles_supérieures , y =Voix_Le_Pen, color=Diplomés_supérieur_non_scolarisés))+
theme_bw()+theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5),
legend.title =element_text(hjust = 0.5),plot.caption = element_text(hjust = 0, face = "italic"))+
labs(subtitle = "Par commune",
caption="Note : Les communes ayant un chômage inférieur à 0.1 point non prises en compte \nChamp : France métropolitaine, limite territoriales des communes au 1er janvier 2018 \nSource : Insee 2018, enquêtes Emploi et de recensement / Ministère de l'intérieur 2022")+
scale_color_viridis_c("Taux de diplomés \n de l'enseigment supérieur", option = "plasma")+
scale_x_continuous("Part des cadres et professions intellectuelles supérieures (%)", limits = c(0.1,40))+
scale_y_continuous("Voix Le Pen au 1er Tour 2022 (%)", limits = c(0,70))+
geom_point()
CPIS
install.packages("MASS")
échant<-function(n,sigma){
n1<-mvrnorm(n,mu=(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
échant<-function(n,sigma){
n1<-mvrnorm(n,mu=c(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n2<-mvrnorm(n,mu=c(sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n3<-mvrnorm(n,mu=c(-sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n4<-mvrnorm(n,mu=c(sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
return(rbind(n1,n2,n3,n4))
}
X<-échant(5,3)
library(MASS)
échant<-function(n,sigma){
n1<-mvrnorm(n,mu=c(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n2<-mvrnorm(n,mu=c(sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n3<-mvrnorm(n,mu=c(-sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n4<-mvrnorm(n,mu=c(sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
return(rbind(n1,n2,n3,n4))
}
X<-échant(5,3)
View(X)
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
X<-échant(5,3)
échant<-function(n,sigma){
n2<-mvrnorm(n,mu=c(sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n3<-mvrnorm(n,mu=c(-sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n1<-mvrnorm(n,mu=c(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
échant<-function(n,sigma){
n1<-mvrnorm(n,mu=c(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n2<-mvrnorm(n,mu=c(sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n3<-mvrnorm(n,mu=c(-sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n4<-mvrnorm(n,mu=c(sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
return(rbind(c(n1,"1"),c(n2,"2"),c(n3,"3"),c(n4,"4")))
}
X<-échant(5,3)
échant<-function(n,sigma){
échant<-function(n,sigma){
n1<-mvrnorm(n,mu=c(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n2<-mvrnorm(n,mu=c(sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n3<-mvrnorm(n,mu=c(-sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n4<-mvrnorm(n,mu=c(sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
return(cbind(rbind(n1,n2,n3,n4),rbind(rep("1",n),rep("2",n),rep("3",n),rep("4",n))))
}
X<-échant(5,3)
X<-rbind(rep("1",n),rep("2",n),rep("3",n),rep("4",n))
X<-rbind(rep("1",5),rep("2",5),rep("3",5),rep("4",5))
échant<-function(n,sigma){
n1<-mvrnorm(n,mu=c(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n2<-mvrnorm(n,mu=c(sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n3<-mvrnorm(n,mu=c(-sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n4<-mvrnorm(n,mu=c(sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
return(cbind(rbind(n1,n2,n3,n4),rbind(rep("1",n),rep("2",n),rep("3",n),rep("4",n))))
}
X<-échant(5,3)
X<-rbind(rep("1",5),rep("2",5),rep("3",5),rep("4",5))
échant<-function(n,sigma){
n1<-mvrnorm(n,mu=c(-sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n2<-mvrnorm(n,mu=c(sigma,-sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n3<-mvrnorm(n,mu=c(-sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
n4<-mvrnorm(n,mu=c(sigma,sigma),Sigma=matrix(c(1, 0, 0, 1), nrow=2))
return(cbind(rbind(n1,n2,n3,n4),cbind(rep("1",n),rep("2",n),rep("3",n),rep("4",n))))
}
X<-échant(5,3)
X<-cbind(rep("1",5),rep("2",5),rep("3",5),rep("4",5))
X<-cbind(rep("1",5),rep("2",5),rep("3",5),rep("4",5))
X<-c(rep("1",5),rep("2",5),rep("3",5),rep("4",5))
X
X<-rbind(rep("1",5),rep("2",5),rep("3",5),rep("4",5))
échant<-function(n,delta){
out=vector(mode="numeric")
Delta=cbind(c(delta,delta,-delta,-delta),c(delta,-delta,delta,-delta))
labels=c()
for(i in 1:4){
vec=cbind(rnorm(n,Delta[i,1]),rnorm(n,Delta[i,2]))
out = rbind(out,vec)
labels=c(labels,rep(i,n))
}
labels=as.factor(as.integer(labels))
return(list(x=out,Z=labels))
}
X<-échant(5,3)
CAH<-agnes(X,metric="euclidian",method = "ward")
library(cluster)
CAH<-agnes(X,metric="euclidian",method = "ward")
CAH<-agnes(X[[1]],metric="euclidian",method = "ward")
fviz_dend(CAH,k=3, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
library(FactoMineR)
fviz_dend(CAH,k=3, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
library(factoextra)
fviz_dend(CAH,k=3, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
fviz_dend(CAH,k=4, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 4)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main=""
#,xlab="",ylab=""
)
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 4)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main="")
fviz_dend(CAH,k=4, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 4)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main="")
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 4)),
as.hclust(CAH),ellipse.type = "convex",main="")
fviz_dend(CAH,k=4, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 4)),
as.hclust(CAH),ellipse.type = "convex",main="")
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 4)),
as.hclust(CAH),ellipse.type = "convex")
plot(X[[1]], col = c("red", "green", "blue","purple")[cutree(CAH, k = 4))
plot(X[[1]], col = c("red", "green", "blue","purple")[cutree(CAH, k = 4)])
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 4)),
as.hclust(CAH), ellipse.type = "convex", main = "") +
labs(x = "Variable 1", y = "Variable 2")
View(CAH)
plot(X[[1]], shape =[cutree(CAH, k = 4)])
plot(X[[1]], shape[cutree(CAH, k = 4)])
plot(X[[1]], col = c("red", "green", "blue","purple")[X$Z)
plot(X[[1]], col = c("red", "green", "blue","purple")[X$Z])
plot(X[[1]], pch=[X$Z])
plot(X[[1]], pch=X$Z)
plot(X[[1]], pch=as.integer(X$Z))
plot(X[[1]], pch=as.integer(X$Z)+10)
plot(X[[1]], pch=as.integer(X$Z))
fviz_dend(CAH,k=4, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
plot(X[[1]], pch=as.integer(X$Z))
plot(X[[1]], pch=as.integer(X$Z))
points(c(1,2))
plot(X[[1]], pch=as.integer(X$Z))
points(c(1))
plot(X[[1]], pch=as.integer(X$Z))
points(c(c(1,2))
plot(X[[1]], pch=as.integer(X$Z))
points(c(c(1,2)))
colmeans(matrix(X[[1]],nrow=5))
colMeans(matrix(X[[1]],nrow=5))
X[["x"]]
data.frame(colMeans(matrix(X[[1]][,1],nrow=5)),colMeans(matrix(X[[1]][,2],nrow=5)))
centre<-data.frame(colMeans(matrix(X[[1]][,1],nrow=5)),colMeans(matrix(X[[1]][,2],nrow=5)))
plot(X[[1]], pch=as.integer(X$Z))
points(x=centre[,1],y=centre[,2])
centre<-data.frame(colMeans(matrix(X[[1]][,1],nrow=5)),colMeans(matrix(X[[1]][,2],nrow=5)),lab=c("1","2","3","4"))
View(centre)
points(x=centre[,1],y=centre[,2],pch=centre[,3])
points(x=centre[,1],y=centre[,2],pch=as.integer(centre[,3]))
plot(X[[1]], pch=as.integer(X$Z))
points(x=centre[,1],y=centre[,2],pch=as.integer(centre[,3]))
plot(X[[1]], pch=as.integer(X$Z))
points(x=centre[,1],y=centre[,2],pch=as.integer(centre[,3]),color="red")
points(x=centre[,1],y=centre[,2],pch=as.integer(centre[,3]),color=c("red"))
plot(X[[1]], pch=as.integer(X$Z))
plot(X[[1]], pch=as.integer(X$Z))
points(x=centre[,1],y=centre[,2],pch=as.integer(centre[,3]),col="red")
plot(X[[1]], pch=as.integer(X$Z))
points(x=centre[,1],y=centre[,2],pch=as.integer(centre[,3]),col="red")
X[["x"]]
plot(X[[1]], pch=as.integer(X$Z))
for (i in 1:4){
xm=colMeans(X[which(i==cutree(CAH,4))])
points(xm[1],xm[2],col=c(i))
}
plot(X[[1]], pch=as.integer(X$Z))
plot(X[[1]], pch=as.integer(X$Z))
for (i in 1:4){
xm=colMeans(X[[1]][which(i==cutree(CAH,4)),])
points(xm[1],xm[2],col=c(i))
}
plot(X[[1]], pch=as.integer(X$Z))
for (i in 1:4){
xm=colMeans(X[[1]][which(i==cutree(CAH,4)),])
points(xm[1],xm[2],col=c(i),pch=c(i))
}
plot(X[[1]], pch=as.integer(X$Z))
for (i in 1:4){
xm=colMeans(X[[1]][which(i==cutree(CAH,4)),])
points(xm[1],xm[2],col=c(i+1),pch=c(i+1))
}
sortedHeight <- sort(CAH$height, decreasing = TRUE)
relHeight <- sortedHeight / sum(sortedHeight) * 100
cumHeight <- cumsum(relHeight)
barplot(relHeight[ 1: 15], names.arg = seq(1, 15, 1),col = "black",border = "white",
xlab = "Noeuds", ylab = "Part de l'inertie totale (%)")
#####Importation et packages
getwd()
mon_repertoire<-"~/Desktop/ENSAI/Projet stat/Source"
setwd(mon_repertoire)
library(openxlsx)
library(haven)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(tidyverse)
library(cluster)
library(esquisse)
library(sf)
T1<-read.table("T1.csv",sep=",",header=TRUE)
T1_2<-read.table("T1_2.csv",sep=",",header=TRUE)
Lab1<-c("Très peu denses","Peu denses","Densité intermédiaire","Densément peuplés")
Lab2<-c("Hors attraction","Aire de - de 50 000hab","Aire de 50 000 à - de 200 000 hab",
"Aire de 200 000 à - de 700 000 hab","Aire de 700 000 hab ou + hors Paris",
"Aire de Paris")
Lab3<-c("Non centre","Centre local", "Centre intermédiaires", "Centres structurant",
"Centre majeur")
T1[,30]<-factor(T1[,30], levels= unique(T1[,30]),labels=Lab1,exclude=NULL)
T1[,31]<-factor(T1[,31], levels= unique(T1[,31]),labels=Lab2,exclude=NULL)
T1[,32]<-factor(T1[,32], levels= unique(T1[,32]),labels=Lab3,exclude=NULL)
T1$Département<- as.factor(T1$Département)
T1_2[,33]<-factor(T1_2[,33], levels= unique(T1_2[,33]),labels=Lab1,exclude=NULL)
T1_2[,34]<-factor(T1_2[,34], levels= unique(T1_2[,34]),labels=Lab2,exclude=NULL)
T1_2[,35]<-factor(T1_2[,35], levels= unique(T1_2[,35]),labels=Lab3,exclude=NULL)
T1_2$Département<- as.factor(T1_2$Département)
FQuantile<-function(var,quant){
Quantile<-as_tibble(quantile(T1[[var]], probs=seq(0,1,1/quant),na.rm=TRUE))
num<-which(colnames(T1)==var)
A<-subset(T1, T1[,num]<=as.numeric(Quantile[2,1]) & T1[,num]>=as.numeric(Quantile[1,1]))
T1$Tranche<<- ifelse(T1$Code %in% A$Code,"1","0")
r<-mean(A$Voix_Le_Pen)
for (i in 2:quant) {
A<-subset(T1, T1[,num]<=as.numeric(Quantile[i+1,1]) & T1[,num]>as.numeric(Quantile[i,1]))
T1$Tranche<<- ifelse(T1$Code %in% A$Code,i,T1$Tranche)
r<-rbind(r,mean(A$Voix_Le_Pen))
rm(A)
}
Quantile<-Quantile[-1,]
Quantile<-cbind(Quantile,r,seq(1:quant))
ifelse(quant==100,colnames(Quantile)<-c("Centiles","Moyenne_Lepen",paste("Tranches_Centiles_",var,sep="")),colnames(Quantile)<-c("Déciles","Moyenne_Lepen",paste("Tranches_Déciles_",var,sep="")))
return(Quantile)
}
FQuantile1_2<-function(var,quant){
Quantile<-as_tibble(quantile(T1_2[[var]], probs=seq(0,1,1/quant),na.rm=TRUE))
num<-which(colnames(T1_2)==var)
A<-subset(T1_2, T1_2[,num]<=as.numeric(Quantile[2,1]) & T1_2[,num]>=as.numeric(Quantile[1,1]))
T1_2$Tranche<<- ifelse(T1_2$Code %in% A$Code,"1","0")
r<-c(mean(A$Voix_Le_Pen1),mean(A$Voix_Le_Pen2))
for (i in 2:quant) {
A<-subset(T1_2, T1_2[,num]<=as.numeric(Quantile[i+1,1]) & T1_2[,num]>as.numeric(Quantile[i,1]))
T1_2$Tranche<<- ifelse(T1_2$Code %in% A$Code,i,T1_2$Tranche)
r<-rbind(r,c(mean(A$Voix_Le_Pen1),mean(A$Voix_Le_Pen2)))
rm(A)
}
Quantile<-Quantile[-1,]
Quantile<-cbind(Quantile,r,seq(1:quant))
ifelse(quant==100,colnames(Quantile)<-c("Centiles","Moyenne_Lepen_T1","Moyenne_Lepen_T2",paste("Tranches_Centiles_",var,sep="")),colnames(Quantile)<-c("Déciles","Moyenne_Lepen",paste("Tranches_Déciles_",var,sep="")))
return(Quantile)
}
FDépartement<-function(){
nlevels<-nlevels(T1$Département)
T1Dep<- data.frame(matrix(0, ncol = 27, nrow = nlevels))
names(T1Dep)<-names(T1)[c(2,3,5:29)]
for (i in 1:nlevels){
T1Dep[i,]<- T1 %>% filter(Département==levels(T1$Département)[i]) %>% select(c(2,3,5:29))%>%  slice(1)
T1Dep[i,2]<-levels(T1$Département)[i]
T1Dep[i,c(3,4)]<- T1 %>% filter(Département==levels(T1$Département)[i]) %>% select(5,6) %>% colSums()
T1Dep[i,c(5:27)]<- T1 %>% filter(Département==levels(T1$Département)[i]) %>% select(7:29) %>% colMeans(na.rm=TRUE) %>% round(1)
}
return(T1Dep)
}
T1Dep<-FDépartement()
rm(Lab1,Lab2,Lab3,mon_repertoire)
CAH<-agnes(T1Dep[,c(5,11,13,14,16,20,7,22)],metric="euclidian",method = "ward",stand=FALSE)
#Maximiser l inertie intergroupe(grande diff entre classe) et minimiser l'inertie intrag(homogénéité dans un groupe)
sortedHeight <- sort(CAH$height, decreasing = TRUE)
relHeight <- sortedHeight / sum(sortedHeight) * 100
cumHeight <- cumsum(relHeight)
CAH<-agnes(T1Dep[,c(5,11,13,14,16,20,7,22)],metric="euclidian",method = "ward",stand=FALSE)
#Maximiser l inertie intergroupe(grande diff entre classe) et minimiser l'inertie intrag(homogénéité dans un groupe)
sortedHeight <- sort(CAH$height, decreasing = TRUE)
relHeight <- sortedHeight / sum(sortedHeight) * 100
cumHeight <- cumsum(relHeight)
barplot(relHeight[ 1: 15], names.arg = seq(1, 15, 1),col = "black",border = "white",
xlab = "Noeuds", ylab = "Part de l'inertie totale (%)")
#plot(CAH, which.plot= 1)
#plot(CAH, which.plot = 2, main = "Dendrogramme de la classification hiérarchique ascendante",xlab="Départements",ylab = "Dissimilarité",labels=FALSE,hang=-1)
fviz_dend(CAH,k=3, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
#plot(T1Dep[,c(5,11,13,14,16,20,7,22)], col = c("red", "green", "blue")[cutree(CAH, k = 3)],
#main = "Clusters obtenus avec la méthode CAH")
fviz_cluster(list(data = T1Dep[,c(5,11,13,14,16,20,7,22)], cluster = cutree(CAH, k = 3)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main=""
#,xlab="",ylab=""
)
silhouette_index <- silhouette(cutree(CAH, k = 3), dist(T1Dep[,c(5,11,13,14,16,20,7,22)]))
plot(silhouette_index, col = c("red", "green", "blue"))
T1Dep$GroupeACH <- factor(cutree(CAH, k = 3),levels = 1:3,labels = paste("Groupe", 1: 3))
clusProfile <- aggregate(T1Dep[, c(5,11,13,14,16,20,19,7,22)],by = list(T1Dep$GroupeACH),mean)
colnames(clusProfile)[ 1] <- "Groupe"
clusLong <- pivot_longer(clusProfile, cols = -Groupe, names_to = "Variable", values_to = "Valeur")
MACH<-ggplot(clusLong) +geom_bar(aes(x = Variable, y = Valeur, fill = Groupe),stat = "identity") +
facet_wrap(~ Groupe) +coord_flip() + theme_bw() + guides(fill = FALSE) + xlab("") +
ylab("Moyenne exprimée en pourcentages")
MACH
MACH<-ggplot(clusLong) +geom_bar(aes(x = Variable, y = Valeur, fill = Groupe),stat = "identity") +
facet_wrap(~ Groupe) +coord_flip() + theme_bw() + guides(fill = FALSE) + xlab("") +
ylab("Moyenne exprimée en pourcentages")+theme(plot.caption = element_text(hjust = 0, face = "italic"))+
labs(caption="Champ : France métropolitaine \nSource : Insee 2018 / Ministère de l'intérieur 2022")
MACH
échant<-function(n,delta){
out=vector(mode="numeric")
Delta=cbind(c(delta,delta,-delta,-delta),c(delta,-delta,delta,-delta))
labels=c()
for(i in 1:4){
vec=cbind(rnorm(n,Delta[i,1]),rnorm(n,Delta[i,2]))
out = rbind(out,vec)
labels=c(labels,rep(i,n))
}
labels=as.factor(as.integer(labels))
return(list(x=out,Z=labels))
}
X<-échant(5,3)
CAH<-agnes(X[[1]],metric="euclidian",method = "ward")
sortedHeight <- sort(CAH$height, decreasing = TRUE)
relHeight <- sortedHeight / sum(sortedHeight) * 100
cumHeight <- cumsum(relHeight)
barplot(relHeight[ 1: 15], names.arg = seq(1, 15, 1),col = "black",border = "white",
xlab = "Noeuds", ylab = "Part de l'inertie totale (%)")
#plot(T1Dep[,c(5,11,13,14,16,20,7,22)], col = c("red", "green", "blue")[cutree(CAH, k = 3)],
#main = "Clusters obtenus avec la méthode CAH")
fviz_cluster(list(data = T1Dep[,c(5,11,13,14,16,20,7,22)], cluster = cutree(CAH, k = 3)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main=""
#,xlab="",ylab=""
)
#plot(CAH, which.plot= 1)
#plot(CAH, which.plot = 2, main = "Dendrogramme de la classification hiérarchique ascendante",xlab="Départements",ylab = "Dissimilarité",labels=FALSE,hang=-1)
fviz_dend(CAH,k=3, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
#plot(T1Dep[,c(5,11,13,14,16,20,7,22)], col = c("red", "green", "blue")[cutree(CAH, k = 3)],
#main = "Clusters obtenus avec la méthode CAH")
fviz_cluster(list(data = T1Dep[,c(5,11,13,14,16,20,7,22)], cluster = cutree(CAH, k = 3)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main=""
#,xlab="",ylab=""
)
CAH<-agnes(T1Dep[,c(5,11,13,14,16,20,7,22)],metric="euclidian",method = "ward",stand=FALSE)
#Maximiser l inertie intergroupe(grande diff entre classe) et minimiser l'inertie intrag(homogénéité dans un groupe)
sortedHeight <- sort(CAH$height, decreasing = TRUE)
relHeight <- sortedHeight / sum(sortedHeight) * 100
cumHeight <- cumsum(relHeight)
barplot(relHeight[ 1: 15], names.arg = seq(1, 15, 1),col = "black",border = "white",
xlab = "Noeuds", ylab = "Part de l'inertie totale (%)")
#plot(CAH, which.plot= 1)
#plot(CAH, which.plot = 2, main = "Dendrogramme de la classification hiérarchique ascendante",xlab="Départements",ylab = "Dissimilarité",labels=FALSE,hang=-1)
fviz_dend(CAH,k=3, show_labels = FALSE, rect = FALSE,ylab = "Dissimilarité", main="")
#plot(T1Dep[,c(5,11,13,14,16,20,7,22)], col = c("red", "green", "blue")[cutree(CAH, k = 3)],
#main = "Clusters obtenus avec la méthode CAH")
fviz_cluster(list(data = T1Dep[,c(5,11,13,14,16,20,7,22)], cluster = cutree(CAH, k = 3)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main=""
#,xlab="",ylab=""
)
data(iris)
force(iris)
rm(iris)
data(iris)
force(iris)
fviz_cluster(list(data = X[[1]], cluster = cutree(CAH, k = 3)),
as.hclust(CAH), stand = TRUE,ellipse.type = "convex",main=""
#,xlab="",ylab=""
)
CAH<-kmeans(iris,metric="euclidian",method = "ward"))
CAH<-kmeans(iris,k=4)
CAH<-kmeans(iris,K=4)
CAH<-kmeans(iris,4)
CAH<-kmeans(iris,4)
Km<-kmeans(iris,4)
fviz_cluster(Km,iris,ellipse.type = "convex")
Km<-kmeans(iris,4)
View(iris)
Km<-kmeans(scale(iris[,-5]),4)
fviz_cluster(Km,iris,ellipse.type = "convex")
fviz_cluster(Km,iris[,-5],ellipse.type = "convex")
Km<-kmeans(scale(iris[,-5]),3)
fviz_cluster(Km,iris[,-5],ellipse.type = "convex")
plot(iris[,-5]], col =c("red", "green", "blue")[Kmeans$cluster] ,
plot(iris[,-5], col =c("red", "green", "blue")[Kmeans$cluster] ,
main = "Clusters obtenus avec la méthode Kmeans")
plot(iris[,-5], col =c("red", "green", "blue")[Km$cluster] ,
main = "Clusters obtenus avec la méthode Kmeans")
plot(1:6, CPtheta, type="b", xlab="K", ylab="inertie-intra")
fviz_cluster(Km,iris[,-5],ellipse.type = "convex")
fviz_cluster(Km,scale(iris[,-5]),ellipse.type = "convex")
clusplot(scale(iris[,-5]),iris$Species,color=TRUE,shade=TRUE,labels=2,lines=0)
fviz_cluster(Km,scale(iris[,-5]),ellipse.type = "convex")
clusplot(scale(iris[,-5]),iris$Species,color=TRUE,shade=TRUE,labels=2,lines=0)
fviz_cluster(Km,scale(iris[,-5]),ellipse.type = "convex")
clusplot(scale(iris[,-5]),iris$Species,color=TRUE,shade=TRUE,labels=2,lines=0)
fviz_cluster(Km,scale(iris[,-5]),ellipse.type = "convex")
clusplot(scale(iris[,-5]),iris$Species,color=TRUE,shade=TRUE,labels=2,lines=0)
clusplot(scale(iris[,-5]),Km$cluster,color=TRUE,shade=TRUE,labels=2,lines=0)
MACH<-ggplot(clusLong) +geom_bar(aes(x = Variable, y = Valeur, fill = Groupe),stat = "identity") +
facet_wrap(~ Groupe) +coord_flip() + theme_bw() + guides(fill = FALSE) + xlab("") +
ylab("Moyenne exprimée en pourcentages")+theme(plot.caption = element_text(hjust = 0, face = "italic"))+
labs(caption="Champ : France métropolitaine \nSource : Insee 2018 / Ministère de l'intérieur 2022")
MACH
ggsave("MoyACH", plot = MACH, width = 800, height = 600, dpi = 300)
ggsave("MoyACH.png", plot = MACH, width = 800, height = 600, dpi = 300)
ggsave("MoyACH.png", plot = MACH, width = 8, height = 6, dpi = 300)
ggsave("Rprojetgraph/MoyACH.png", plot = MACH, width = 8, height = 6, dpi = 300)
savehistory("~/Desktop/ENSAI/Projet stat/R/Aide.Rhistory")
